// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyGarageDB;

#nullable disable

namespace MyGarageDB.Migrations
{
    [DbContext(typeof(mygarageContext))]
    [Migration("20220917065536_Init_5")]
    partial class Init_5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("MyGarageDB.Garage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Sity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("garage", (string)null);
                });

            modelBuilder.Entity("MyGarageDB.Transport", b =>
                {
                    b.Property<int>("IdTr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("brand");

                    b.Property<int?>("FuelQuntity")
                        .HasColumnType("int")
                        .HasColumnName("fuelQuntity");

                    b.Property<string>("FuelType")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("fuelType");

                    b.Property<int?>("GarageId")
                        .HasColumnType("int")
                        .HasColumnName("garage_Id");

                    b.Property<int>("MaxSpeed")
                        .HasColumnType("int")
                        .HasColumnName("maxSpeed");

                    b.Property<string>("Namber")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("namber");

                    b.Property<bool?>("OnRoad")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_Id");

                    b.HasKey("IdTr")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "GarageId" }, "transport_FK");

                    b.HasIndex(new[] { "TypeId" }, "transport_TP");

                    b.ToTable("transport", (string)null);
                });

            modelBuilder.Entity("MyGarageDB.Type", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("TypeTrans")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("type", (string)null);
                });

            modelBuilder.Entity("MyGarageDB.Transport", b =>
                {
                    b.HasOne("MyGarageDB.Garage", "Garage")
                        .WithMany("Transports")
                        .HasForeignKey("GarageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("transport_FK");

                    b.HasOne("MyGarageDB.Type", "Type")
                        .WithMany("Transports")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("transport_TP");

                    b.Navigation("Garage");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MyGarageDB.Garage", b =>
                {
                    b.Navigation("Transports");
                });

            modelBuilder.Entity("MyGarageDB.Type", b =>
                {
                    b.Navigation("Transports");
                });
#pragma warning restore 612, 618
        }
    }
}
